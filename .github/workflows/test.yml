name: Test

on:
  push:
    branches:
      - develop
      - master
      - main

  pull_request_target:
    branches:
      - "*"

jobs:
  static_analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Test the action
      shell: bash
      run: |
          if [ ${GITHUB_EVENT_NAME} = 'push' ]
          then
            echo GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME} using ${GITHUB_REF_NAME}
            BRANCH_NAME=${GITHUB_REF_NAME}
          else
            echo GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME} using ${GITHUB_HEAD_REF}
            BRANCH_NAME=${GITHUB_HEAD_REF}
          fi

          echo BRANCH_NAME=${BRANCH_NAME}

    - name: Run CMake
      shell: bash
      run: |
        cmake -E make_directory ${{runner.workspace}}/build
        cd ${{runner.workspace}}/build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON "$GITHUB_WORKSPACE"
        cmake --build . 2> >(tee "output.txt")

    - name: Run CMake + build in Docker
      run: |
          docker run --rm \
            -v "${{ github.workspace }}:/src" \
            -w /src \
            gcc:12 bash -c "\
              apt-get update && apt-get install cmake -y && \
              mkdir -p build_tmp && \
              cd build_tmp && \
              cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. \
            "

    - name: Post PR comment for warnings/errors
      if: ${{ always() }} && github.ref != 'refs/heads/master'
      uses: JacobDomagala/CompileResultAction@master
      with:
        comment_title: UBUNTU COMPILE RESULT
        compile_result_file: ${{runner.workspace}}/build/output.txt

    - name: setup init_script
      shell: bash
      run: |
        echo "#!/bin/bash
        root_dir=\${1}
        build_dir=\${2}
        echo \"Hello from the init script! First arg=\${root_dir} second arg=\${build_dir}\" " > init_script.sh

    - name: Run static analysis (CMake)
      if: ${{ always() }}
      uses: JacobDomagala/StaticAnalysis@add-ff-and-infer
      with:
        comment_title: "SA CMake output"
        verbose: true
        exclude_dir: lib
        init_script: init_script.sh
        cmake_args: -DCMAKE_BUILD_TYPE=Debug
        clang_tidy_args: |
            -extra-arg=-std=c++20
        cppcheck_args: |
            --enable=all --suppress=missingIncludeSystem --suppress=functionStatic --suppress=unusedFunction --inline-suppr --inconclusive

    - name: Run static analysis (non CMake)
      if: ${{ always() }}
      uses: JacobDomagala/StaticAnalysis@add-ff-and-infer
      with:
        comment_title: "SA non-CMake output"
        verbose: true
        use_cmake: false
        exclude_dir: lib
        compile_commands: build_tmp/compile_commands.json
        init_script: init_script.sh
        cmake_args: -DCMAKE_BUILD_TYPE=Debug
        clang_tidy_args: |
            -extra-arg=-std=c++20
        cppcheck_args: |
            --enable=all --suppress=missingIncludeSystem --suppress=functionStatic --suppress=unusedFunction --inline-suppr --inconclusive
